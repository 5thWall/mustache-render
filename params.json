{"name":"Mustache-render","tagline":"Grunt plugin for testing mustache templates","body":"# grunt-mustache-render v1.9.0\r\n\r\n[![Build Status](https://travis-ci.org/5thWall/mustache-render.png?branch=master)](https://travis-ci.org/5thWall/mustache-render)\r\n[![NPM version](https://badge.fury.io/js/grunt-mustache-render.png)](http://badge.fury.io/js/grunt-mustache-render)\r\n\r\nThis is a grunt plugin to render [mustache](http://mustache.github.io/) templates. It takes data in static `JSON`, static `YAML`, `JS` module, or a `POJO` (Plain Ol' JavaScript Object) format. It allows you to specify a folder for partials, instead of needing to list them individually.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-mustache-render --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-mustache-render');\r\n```\r\n\r\n## The \"mustache_render\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `mustache_render` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  mustache_render: {\r\n    options: {\r\n      // Task global options go here\r\n    },\r\n    your_target: {\r\n      options: {\r\n        // Target specific options go here\r\n      },\r\n      files : [\r\n        {\r\n          data: // Path to JS module, path or URL to JSON or YAML, or POJO\r\n          template: // Path or URL to template file\r\n          dest: // Path to output destination here\r\n        }\r\n      ]\r\n    },\r\n  },\r\n})\r\n```\r\n**Note:** The `files` parameter _must_ be an array, and _must_ conform to the format specified above. Each object in the file array represents _one_ rendered template. Data files can be in either `JSON`, `YAML` format, or as either an external `JS` file via `module.exports` or a `POJO` (Plain Ol' JavaScript Object).\r\n\r\n#### Building Long File Lists\r\n\r\nIf you want to build out a long list for the `files` array, perhaps dynamically as described by [building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically), you may use either `data` *or* `template` as the source (`src`) value as long as you specify the other one by its normal name. See below for some examples.\r\n\r\n#### Examples:\r\n\r\n```js\r\nfiles: [\r\n  {data: \"path/to/data/file.json\",\r\n   template: \"path/to/template.mustache\",\r\n   dest: \"file/to/output.html\"},\r\n  {data: \"http://api.example.com/file.json\",\r\n   template: \"http://docs.example.com/report.mustache\",\r\n   dest: \"file/to/output.html\"}\r\n]\r\n```\r\n\r\n```js\r\nfiles: [\r\n  {data: { greeting: \"Hello\", target: \"world\" },\r\n   template: \"path/to/template.mustache\",\r\n   dest: \"file/to/output.html\"},\r\n  {data: { greeting: \"Hola\", target: \"mundo\" },\r\n   template: \"http://docs.example.com/report.mustache\",\r\n   dest: \"file/to/output.html\"}\r\n]\r\n```\r\n\r\n```js\r\noptions: {template: 'common-template.mustache'},\r\nfiles: {\r\n  'file/to/output-1.html': 'data/to/read-1.json',\r\n  'file/to/output-2.html': 'data/to/read-2.json',\r\n  'file/to/output-3.html': 'data/to/read-3.json'\r\n}\r\n```\r\n\r\n```js\r\nfiles: [\r\n  {expand: true,\r\n   src: 'data/to/read-*.json',\r\n   template: 'common-template.mustache',\r\n   dest: 'dest/directory/'}\r\n]\r\n```\r\n\r\n```js\r\noptions: {data: 'common-data.json'},\r\nfiles: {\r\n  'file/to/output-1.html': 'template/to/read-1.mustache',\r\n  'file/to/output-2.html': 'template/to/read-2.mustache',\r\n  'file/to/output-3.html': 'template/to/read-3.mustache'\r\n}\r\n```\r\n\r\n```js\r\nfiles: [\r\n  {expand: true,\r\n   src: 'template/to/read-*.mustache',\r\n   data: 'common-data.js',\r\n   dest: 'dest/directory/'}\r\n]\r\n```\r\n\r\n### Options\r\n\r\n#### options.directory\r\nType: `String`  \r\nDefault value: `\".\"` (i.e. relative to your `Gruntfile.js`)\r\n\r\nPath to the directory in which partials can be found. Partials are looked up by name in this directory.\r\n\r\n#### options.extension\r\nType: `String`  \r\nDefault value: `\".mustache\"`\r\n\r\n`mustache-render` will use this extension when looking up partials.\r\n\r\n#### options.prefix_file and options.prefix_dir\r\nType: `String`  \r\nDefault value: `\"\"`\r\n\r\n`mustache-render` will use these as common prefixes when looking up partials,\r\nwith `prefix_file` prepended onto the filename and `prefix_dir` prepended onto\r\nthe leading directory (if any). For example, given `prefix_file: 'part_'` and\r\n`prefix_dir: 'sub_'`, a partial reference for `a/hello` would search for a\r\nfile named `sub_a/part_hello.mustache`.\r\n\r\n*Note:* Versions 1.6 and earlier of the plug-in use an option called `prefix`,\r\nwhich prepended onto the partial reference, regardless of whether it included\r\na directory or not. This option is still supported for backward compatibility\r\nand maintains the same behavior.\r\n\r\n#### options.glob\r\nType: `String`  \r\nDefault value: `\"\"`\r\n\r\nA glob pattern to use to search for partials. If this option is set, `options.prefix_file`, `options.prefix_dir`,\r\n`options.prefix` and `options.extension` will be ignored. The glob pattern will be expanded using \r\n[`grunt.file.expand`](http://gruntjs.com/api/grunt.file#grunt.file.expand) and the first file found will be used.\r\nIf more than one file is found, a warning will be printed.\r\n\r\nYou can use this variables in the pattern:\r\n * `$0` The whole partial name\r\n * `$1` The partial name's directory part\r\n * `$2` The partial name's basename part\r\n\r\nExamples:\r\n * `prefix_dir$1/prefix_file$2` does the same as using `options.prefix_file` and `options.prefix_dir`\r\n * `$0.*` allows any extension\r\n * `{images/$0.svg,partials/$0.mustache}` seaches for a partial either as `name.svg` in the `image` folder or as `name.mustache` in the `partials` folder.\r\n\r\n#### options.clear_cache\r\nType: `Boolean`  \r\nDefault value: `false`\r\n\r\nClears the mustache cache before running the target. Mustache will cache partials by name when running multiple tasks, so this option is usefull if `options.extension`, `options.directory`, or `options.prefix` have been changed between tasks.\r\n\r\n#### options.partial_finder\r\nType: `Function`  \r\nDefault value: `null`\r\n\r\nOverrides the default function for finding partials. The function will be passed the name of the partial as a parameter, and must return the text of the partial.\r\n\r\n```js\r\npartial_finder: function(name) {\r\n  return \"Hello, I am a partial with name: \" + name + \"\\n\";\r\n}\r\n```\r\n\r\n#### options.data and options.template\r\nType: anything normally accepted for a file  \r\nDefault value: `undefined`\r\n\r\nThese two slots can be used to fill in a default `data` or `template` value for any item in your `files` list that does not already have one specified.  This can be handy if you want to dynamically build the `files` list and apply the same `data` or `template` source to every item in the list.\r\n\r\n### options.escape\r\nType: `Boolean` or `Function`  \r\nDefault value: `true`\r\n\r\nBy default (`true`), mustache will escape special HTML characters unless explicitly disabled in the template body (e.g. by using triple mustaches, `{{{var}}}`).\r\n\r\nIf set to `false` it disables default HTML escaping. That means that `{{var}}` will not be escaped. This is useful for templating files that are not HTML.\r\n\r\nTo implement custom escape handling specific to your needs, you may instead pass a function that accepts and returns a string.\r\n\r\n### Usage Examples\r\n\r\nFor this Grunt config:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  mustache_render: {\r\n    all: {\r\n      files: [{\r\n        data: \"data/hello_world.json\",\r\n        template: \"templates/hello_world.mustache\",\r\n        dest: \"public/hello_world.html\"\r\n      }]\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nAnd this `json`:\r\n\r\n```js\r\n{\r\n  \"greeting\" : \"Hello\",\r\n  \"target\" : \"World\"\r\n}\r\n```\r\n\r\nThis template:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>A greeting</title>\r\n</head>\r\n<body>\r\n  <h1>{{greeting}}, {{target}}!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nWill produce this output:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>A greeting</title>\r\n</head>\r\n<body>\r\n  <h1>Hello, World!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}