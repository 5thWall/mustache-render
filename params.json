{"name":"Mustache-render","tagline":"Grunt plugin for testing mustache templates","body":"# grunt-mustache-render v1.2.2\r\n\r\n[![Build Status](https://travis-ci.org/5thWall/mustache-render.png?branch=master)](https://travis-ci.org/5thWall/mustache-render)\r\n[![NPM version](https://badge.fury.io/js/grunt-mustache-render.png)](http://badge.fury.io/js/grunt-mustache-render)\r\n\r\n> Render mustache templates\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-mustache-render --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-mustache-render');\r\n```\r\n\r\n## The \"mustache_render\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `mustache_render` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  mustache_render: {\r\n    options: {\r\n      // Task global options go here\r\n    },\r\n    your_target: {\r\n      options: {\r\n        // Target specific options go here\r\n      },\r\n      files : [\r\n        {\r\n          data: // Path to JSON or YAML file, or POJO\r\n          template: // Path to template file\r\n          dest: // Path to output destination here\r\n        }\r\n      ]\r\n    },\r\n  },\r\n})\r\n```\r\n**Note:** The `files` parameter _must_ be an array, and _must_ conform to the format specified above. Each object in the file array represents _one_ rendered template. Data files can be in either `JSON` or `YAML` format or as a POJO (Plain Ol' JavaScript Object).\r\n\r\n#### Examples:\r\n\r\n```js\r\nfiles: [\r\n  {data: \"path/to/data/file.json\",\r\n   template: \"path/to/template.mustache\",\r\n   dest: \"file/to/output.html\"}\r\n]\r\n```\r\n\r\n```js\r\nfiles: [\r\n  {data: { greeting: \"Hello\", target: \"world\" },\r\n   template: \"path/to/template.mustache\",\r\n   dest: \"file/to/output.html\"}\r\n]\r\n```\r\n\r\n### Options\r\n\r\n#### options.directory\r\nType: `String`\r\nDefault value: `\"\"`\r\n\r\nPath to the directory in which partials can be found. Partials are looked up by name in this directory.\r\n\r\n#### options.extension\r\nType: `String`\r\nDefault value: `\".mustache\"`\r\n\r\n`mustache-render` will use this extension when looking up partials.\r\n\r\n#### options.prefix\r\nType: `String`\r\nDefault value: `\"\"`\r\n\r\n`mustache-render` will use this as a common prefix when looking up partials. So given the prefix: `part_` for a partial named `hello` it will search for a file named `part_hello.mustache`.\r\n\r\n#### options.clear_cache\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nClears the mustache cache before running the target. Mustache will cache partials by name when running multiple tasks, so this option is usefull if `options.extension`, `options.directory`, or `options.prefix` have been changed between tasks.\r\n\r\n### Usage Examples\r\n\r\nFor this Grunt config:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  mustache_render: {\r\n    all: {\r\n      files: [{\r\n        data: \"data/hello_world.json\",\r\n        template: \"templates/hello_world.mustache\",\r\n        dest: \"public/hello_world.html\"\r\n      }]\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nAnd this `json`:\r\n\r\n```js\r\n{\r\n  \"greeting\" : \"Hello\",\r\n  \"target\" : \"World\"\r\n}\r\n```\r\n\r\nThis template:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>A greeting</title>\r\n</head>\r\n<body>\r\n  <h1>{{greeting}}, {{target}}!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nWill produce this output:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>A greeting</title>\r\n</head>\r\n<body>\r\n  <h1>Hello, World!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n\r\n__1.2.2__\r\n\r\n * Major code refactor\r\n * Remove `lodash` dependency\r\n\r\n__1.2.1__\r\n\r\n * Code Cleanup\r\n\r\n__1.2.0__\r\n\r\n * Allow arbitrary JavaScript objects to be passed as data\r\n\r\n__1.1.0__\r\n\r\n * Option for common prefix on partials\r\n * Option to clear mustache cache before running task\r\n\r\n__1.0.0__\r\n\r\n * Created website\r\n * API now considered stable\r\n\r\n__0.3.0__\r\n\r\n * Unverbosify options\r\n\r\n__0.2.1__\r\n\r\n * Bugfix: dependencies\r\n\r\n__0.2.0__\r\n\r\n * `YAML` data file support\r\n\r\n__0.1.0__\r\n\r\n * Initial Release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}